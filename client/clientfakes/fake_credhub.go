// Code generated by counterfeiter. DO NOT EDIT.
package clientfakes

import (
	"sync"

	"github.com/jghiloni/credhub-sdk/client"
)

type FakeCredhub struct {
	ListAllCredentialsStub        func() ([]client.Credential, error)
	listAllCredentialsMutex       sync.RWMutex
	listAllCredentialsArgsForCall []struct{}
	listAllCredentialsReturns     struct {
		result1 []client.Credential
		result2 error
	}
	listAllCredentialsReturnsOnCall map[int]struct {
		result1 []client.Credential
		result2 error
	}
	GetByIDStub        func(id string) (client.Credential, error)
	getByIDMutex       sync.RWMutex
	getByIDArgsForCall []struct {
		id string
	}
	getByIDReturns struct {
		result1 client.Credential
		result2 error
	}
	getByIDReturnsOnCall map[int]struct {
		result1 client.Credential
		result2 error
	}
	GetAllByNameStub        func(name string) ([]client.Credential, error)
	getAllByNameMutex       sync.RWMutex
	getAllByNameArgsForCall []struct {
		name string
	}
	getAllByNameReturns struct {
		result1 []client.Credential
		result2 error
	}
	getAllByNameReturnsOnCall map[int]struct {
		result1 []client.Credential
		result2 error
	}
	GetVersionsByNameStub        func(name string, numVersions int) ([]client.Credential, error)
	getVersionsByNameMutex       sync.RWMutex
	getVersionsByNameArgsForCall []struct {
		name        string
		numVersions int
	}
	getVersionsByNameReturns struct {
		result1 []client.Credential
		result2 error
	}
	getVersionsByNameReturnsOnCall map[int]struct {
		result1 []client.Credential
		result2 error
	}
	GetLatestByNameStub        func(name string) (client.Credential, error)
	getLatestByNameMutex       sync.RWMutex
	getLatestByNameArgsForCall []struct {
		name string
	}
	getLatestByNameReturns struct {
		result1 client.Credential
		result2 error
	}
	getLatestByNameReturnsOnCall map[int]struct {
		result1 client.Credential
		result2 error
	}
	SetStub        func(credential client.Credential) (client.Credential, error)
	setMutex       sync.RWMutex
	setArgsForCall []struct {
		credential client.Credential
	}
	setReturns struct {
		result1 client.Credential
		result2 error
	}
	setReturnsOnCall map[int]struct {
		result1 client.Credential
		result2 error
	}
	GenerateStub        func(name string, credentialType client.CredentialType, parameters map[string]interface{}) (client.Credential, error)
	generateMutex       sync.RWMutex
	generateArgsForCall []struct {
		name           string
		credentialType client.CredentialType
		parameters     map[string]interface{}
	}
	generateReturns struct {
		result1 client.Credential
		result2 error
	}
	generateReturnsOnCall map[int]struct {
		result1 client.Credential
		result2 error
	}
	RegenerateStub        func(name string) (client.Credential, error)
	regenerateMutex       sync.RWMutex
	regenerateArgsForCall []struct {
		name string
	}
	regenerateReturns struct {
		result1 client.Credential
		result2 error
	}
	regenerateReturnsOnCall map[int]struct {
		result1 client.Credential
		result2 error
	}
	DeleteStub        func(name string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		name string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	FindByPathStub        func(path string) ([]client.Credential, error)
	findByPathMutex       sync.RWMutex
	findByPathArgsForCall []struct {
		path string
	}
	findByPathReturns struct {
		result1 []client.Credential
		result2 error
	}
	findByPathReturnsOnCall map[int]struct {
		result1 []client.Credential
		result2 error
	}
	FindByPartialNameStub        func(partialName string) ([]client.Credential, error)
	findByPartialNameMutex       sync.RWMutex
	findByPartialNameArgsForCall []struct {
		partialName string
	}
	findByPartialNameReturns struct {
		result1 []client.Credential
		result2 error
	}
	findByPartialNameReturnsOnCall map[int]struct {
		result1 []client.Credential
		result2 error
	}
	GetPermissionsStub        func(credentialName string) ([]client.Permission, error)
	getPermissionsMutex       sync.RWMutex
	getPermissionsArgsForCall []struct {
		credentialName string
	}
	getPermissionsReturns struct {
		result1 []client.Permission
		result2 error
	}
	getPermissionsReturnsOnCall map[int]struct {
		result1 []client.Permission
		result2 error
	}
	AddPermissionsStub        func(credentialName string, newPerms []client.Permission) ([]client.Permission, error)
	addPermissionsMutex       sync.RWMutex
	addPermissionsArgsForCall []struct {
		credentialName string
		newPerms       []client.Permission
	}
	addPermissionsReturns struct {
		result1 []client.Permission
		result2 error
	}
	addPermissionsReturnsOnCall map[int]struct {
		result1 []client.Permission
		result2 error
	}
	DeletePermissionsStub        func(credentialName, actorID string) error
	deletePermissionsMutex       sync.RWMutex
	deletePermissionsArgsForCall []struct {
		credentialName string
		actorID        string
	}
	deletePermissionsReturns struct {
		result1 error
	}
	deletePermissionsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCredhub) ListAllCredentials() ([]client.Credential, error) {
	fake.listAllCredentialsMutex.Lock()
	ret, specificReturn := fake.listAllCredentialsReturnsOnCall[len(fake.listAllCredentialsArgsForCall)]
	fake.listAllCredentialsArgsForCall = append(fake.listAllCredentialsArgsForCall, struct{}{})
	fake.recordInvocation("ListAllCredentials", []interface{}{})
	fake.listAllCredentialsMutex.Unlock()
	if fake.ListAllCredentialsStub != nil {
		return fake.ListAllCredentialsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listAllCredentialsReturns.result1, fake.listAllCredentialsReturns.result2
}

func (fake *FakeCredhub) ListAllCredentialsCallCount() int {
	fake.listAllCredentialsMutex.RLock()
	defer fake.listAllCredentialsMutex.RUnlock()
	return len(fake.listAllCredentialsArgsForCall)
}

func (fake *FakeCredhub) ListAllCredentialsReturns(result1 []client.Credential, result2 error) {
	fake.ListAllCredentialsStub = nil
	fake.listAllCredentialsReturns = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) ListAllCredentialsReturnsOnCall(i int, result1 []client.Credential, result2 error) {
	fake.ListAllCredentialsStub = nil
	if fake.listAllCredentialsReturnsOnCall == nil {
		fake.listAllCredentialsReturnsOnCall = make(map[int]struct {
			result1 []client.Credential
			result2 error
		})
	}
	fake.listAllCredentialsReturnsOnCall[i] = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetByID(id string) (client.Credential, error) {
	fake.getByIDMutex.Lock()
	ret, specificReturn := fake.getByIDReturnsOnCall[len(fake.getByIDArgsForCall)]
	fake.getByIDArgsForCall = append(fake.getByIDArgsForCall, struct {
		id string
	}{id})
	fake.recordInvocation("GetByID", []interface{}{id})
	fake.getByIDMutex.Unlock()
	if fake.GetByIDStub != nil {
		return fake.GetByIDStub(id)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getByIDReturns.result1, fake.getByIDReturns.result2
}

func (fake *FakeCredhub) GetByIDCallCount() int {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return len(fake.getByIDArgsForCall)
}

func (fake *FakeCredhub) GetByIDArgsForCall(i int) string {
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	return fake.getByIDArgsForCall[i].id
}

func (fake *FakeCredhub) GetByIDReturns(result1 client.Credential, result2 error) {
	fake.GetByIDStub = nil
	fake.getByIDReturns = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetByIDReturnsOnCall(i int, result1 client.Credential, result2 error) {
	fake.GetByIDStub = nil
	if fake.getByIDReturnsOnCall == nil {
		fake.getByIDReturnsOnCall = make(map[int]struct {
			result1 client.Credential
			result2 error
		})
	}
	fake.getByIDReturnsOnCall[i] = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetAllByName(name string) ([]client.Credential, error) {
	fake.getAllByNameMutex.Lock()
	ret, specificReturn := fake.getAllByNameReturnsOnCall[len(fake.getAllByNameArgsForCall)]
	fake.getAllByNameArgsForCall = append(fake.getAllByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetAllByName", []interface{}{name})
	fake.getAllByNameMutex.Unlock()
	if fake.GetAllByNameStub != nil {
		return fake.GetAllByNameStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getAllByNameReturns.result1, fake.getAllByNameReturns.result2
}

func (fake *FakeCredhub) GetAllByNameCallCount() int {
	fake.getAllByNameMutex.RLock()
	defer fake.getAllByNameMutex.RUnlock()
	return len(fake.getAllByNameArgsForCall)
}

func (fake *FakeCredhub) GetAllByNameArgsForCall(i int) string {
	fake.getAllByNameMutex.RLock()
	defer fake.getAllByNameMutex.RUnlock()
	return fake.getAllByNameArgsForCall[i].name
}

func (fake *FakeCredhub) GetAllByNameReturns(result1 []client.Credential, result2 error) {
	fake.GetAllByNameStub = nil
	fake.getAllByNameReturns = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetAllByNameReturnsOnCall(i int, result1 []client.Credential, result2 error) {
	fake.GetAllByNameStub = nil
	if fake.getAllByNameReturnsOnCall == nil {
		fake.getAllByNameReturnsOnCall = make(map[int]struct {
			result1 []client.Credential
			result2 error
		})
	}
	fake.getAllByNameReturnsOnCall[i] = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetVersionsByName(name string, numVersions int) ([]client.Credential, error) {
	fake.getVersionsByNameMutex.Lock()
	ret, specificReturn := fake.getVersionsByNameReturnsOnCall[len(fake.getVersionsByNameArgsForCall)]
	fake.getVersionsByNameArgsForCall = append(fake.getVersionsByNameArgsForCall, struct {
		name        string
		numVersions int
	}{name, numVersions})
	fake.recordInvocation("GetVersionsByName", []interface{}{name, numVersions})
	fake.getVersionsByNameMutex.Unlock()
	if fake.GetVersionsByNameStub != nil {
		return fake.GetVersionsByNameStub(name, numVersions)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getVersionsByNameReturns.result1, fake.getVersionsByNameReturns.result2
}

func (fake *FakeCredhub) GetVersionsByNameCallCount() int {
	fake.getVersionsByNameMutex.RLock()
	defer fake.getVersionsByNameMutex.RUnlock()
	return len(fake.getVersionsByNameArgsForCall)
}

func (fake *FakeCredhub) GetVersionsByNameArgsForCall(i int) (string, int) {
	fake.getVersionsByNameMutex.RLock()
	defer fake.getVersionsByNameMutex.RUnlock()
	return fake.getVersionsByNameArgsForCall[i].name, fake.getVersionsByNameArgsForCall[i].numVersions
}

func (fake *FakeCredhub) GetVersionsByNameReturns(result1 []client.Credential, result2 error) {
	fake.GetVersionsByNameStub = nil
	fake.getVersionsByNameReturns = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetVersionsByNameReturnsOnCall(i int, result1 []client.Credential, result2 error) {
	fake.GetVersionsByNameStub = nil
	if fake.getVersionsByNameReturnsOnCall == nil {
		fake.getVersionsByNameReturnsOnCall = make(map[int]struct {
			result1 []client.Credential
			result2 error
		})
	}
	fake.getVersionsByNameReturnsOnCall[i] = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetLatestByName(name string) (client.Credential, error) {
	fake.getLatestByNameMutex.Lock()
	ret, specificReturn := fake.getLatestByNameReturnsOnCall[len(fake.getLatestByNameArgsForCall)]
	fake.getLatestByNameArgsForCall = append(fake.getLatestByNameArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("GetLatestByName", []interface{}{name})
	fake.getLatestByNameMutex.Unlock()
	if fake.GetLatestByNameStub != nil {
		return fake.GetLatestByNameStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getLatestByNameReturns.result1, fake.getLatestByNameReturns.result2
}

func (fake *FakeCredhub) GetLatestByNameCallCount() int {
	fake.getLatestByNameMutex.RLock()
	defer fake.getLatestByNameMutex.RUnlock()
	return len(fake.getLatestByNameArgsForCall)
}

func (fake *FakeCredhub) GetLatestByNameArgsForCall(i int) string {
	fake.getLatestByNameMutex.RLock()
	defer fake.getLatestByNameMutex.RUnlock()
	return fake.getLatestByNameArgsForCall[i].name
}

func (fake *FakeCredhub) GetLatestByNameReturns(result1 client.Credential, result2 error) {
	fake.GetLatestByNameStub = nil
	fake.getLatestByNameReturns = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetLatestByNameReturnsOnCall(i int, result1 client.Credential, result2 error) {
	fake.GetLatestByNameStub = nil
	if fake.getLatestByNameReturnsOnCall == nil {
		fake.getLatestByNameReturnsOnCall = make(map[int]struct {
			result1 client.Credential
			result2 error
		})
	}
	fake.getLatestByNameReturnsOnCall[i] = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) Set(credential client.Credential) (client.Credential, error) {
	fake.setMutex.Lock()
	ret, specificReturn := fake.setReturnsOnCall[len(fake.setArgsForCall)]
	fake.setArgsForCall = append(fake.setArgsForCall, struct {
		credential client.Credential
	}{credential})
	fake.recordInvocation("Set", []interface{}{credential})
	fake.setMutex.Unlock()
	if fake.SetStub != nil {
		return fake.SetStub(credential)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.setReturns.result1, fake.setReturns.result2
}

func (fake *FakeCredhub) SetCallCount() int {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return len(fake.setArgsForCall)
}

func (fake *FakeCredhub) SetArgsForCall(i int) client.Credential {
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	return fake.setArgsForCall[i].credential
}

func (fake *FakeCredhub) SetReturns(result1 client.Credential, result2 error) {
	fake.SetStub = nil
	fake.setReturns = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) SetReturnsOnCall(i int, result1 client.Credential, result2 error) {
	fake.SetStub = nil
	if fake.setReturnsOnCall == nil {
		fake.setReturnsOnCall = make(map[int]struct {
			result1 client.Credential
			result2 error
		})
	}
	fake.setReturnsOnCall[i] = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) Generate(name string, credentialType client.CredentialType, parameters map[string]interface{}) (client.Credential, error) {
	fake.generateMutex.Lock()
	ret, specificReturn := fake.generateReturnsOnCall[len(fake.generateArgsForCall)]
	fake.generateArgsForCall = append(fake.generateArgsForCall, struct {
		name           string
		credentialType client.CredentialType
		parameters     map[string]interface{}
	}{name, credentialType, parameters})
	fake.recordInvocation("Generate", []interface{}{name, credentialType, parameters})
	fake.generateMutex.Unlock()
	if fake.GenerateStub != nil {
		return fake.GenerateStub(name, credentialType, parameters)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.generateReturns.result1, fake.generateReturns.result2
}

func (fake *FakeCredhub) GenerateCallCount() int {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return len(fake.generateArgsForCall)
}

func (fake *FakeCredhub) GenerateArgsForCall(i int) (string, client.CredentialType, map[string]interface{}) {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return fake.generateArgsForCall[i].name, fake.generateArgsForCall[i].credentialType, fake.generateArgsForCall[i].parameters
}

func (fake *FakeCredhub) GenerateReturns(result1 client.Credential, result2 error) {
	fake.GenerateStub = nil
	fake.generateReturns = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GenerateReturnsOnCall(i int, result1 client.Credential, result2 error) {
	fake.GenerateStub = nil
	if fake.generateReturnsOnCall == nil {
		fake.generateReturnsOnCall = make(map[int]struct {
			result1 client.Credential
			result2 error
		})
	}
	fake.generateReturnsOnCall[i] = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) Regenerate(name string) (client.Credential, error) {
	fake.regenerateMutex.Lock()
	ret, specificReturn := fake.regenerateReturnsOnCall[len(fake.regenerateArgsForCall)]
	fake.regenerateArgsForCall = append(fake.regenerateArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Regenerate", []interface{}{name})
	fake.regenerateMutex.Unlock()
	if fake.RegenerateStub != nil {
		return fake.RegenerateStub(name)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.regenerateReturns.result1, fake.regenerateReturns.result2
}

func (fake *FakeCredhub) RegenerateCallCount() int {
	fake.regenerateMutex.RLock()
	defer fake.regenerateMutex.RUnlock()
	return len(fake.regenerateArgsForCall)
}

func (fake *FakeCredhub) RegenerateArgsForCall(i int) string {
	fake.regenerateMutex.RLock()
	defer fake.regenerateMutex.RUnlock()
	return fake.regenerateArgsForCall[i].name
}

func (fake *FakeCredhub) RegenerateReturns(result1 client.Credential, result2 error) {
	fake.RegenerateStub = nil
	fake.regenerateReturns = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) RegenerateReturnsOnCall(i int, result1 client.Credential, result2 error) {
	fake.RegenerateStub = nil
	if fake.regenerateReturnsOnCall == nil {
		fake.regenerateReturnsOnCall = make(map[int]struct {
			result1 client.Credential
			result2 error
		})
	}
	fake.regenerateReturnsOnCall[i] = struct {
		result1 client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) Delete(name string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		name string
	}{name})
	fake.recordInvocation("Delete", []interface{}{name})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		return fake.DeleteStub(name)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteReturns.result1
}

func (fake *FakeCredhub) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeCredhub) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].name
}

func (fake *FakeCredhub) DeleteReturns(result1 error) {
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhub) DeleteReturnsOnCall(i int, result1 error) {
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhub) FindByPath(path string) ([]client.Credential, error) {
	fake.findByPathMutex.Lock()
	ret, specificReturn := fake.findByPathReturnsOnCall[len(fake.findByPathArgsForCall)]
	fake.findByPathArgsForCall = append(fake.findByPathArgsForCall, struct {
		path string
	}{path})
	fake.recordInvocation("FindByPath", []interface{}{path})
	fake.findByPathMutex.Unlock()
	if fake.FindByPathStub != nil {
		return fake.FindByPathStub(path)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findByPathReturns.result1, fake.findByPathReturns.result2
}

func (fake *FakeCredhub) FindByPathCallCount() int {
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	return len(fake.findByPathArgsForCall)
}

func (fake *FakeCredhub) FindByPathArgsForCall(i int) string {
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	return fake.findByPathArgsForCall[i].path
}

func (fake *FakeCredhub) FindByPathReturns(result1 []client.Credential, result2 error) {
	fake.FindByPathStub = nil
	fake.findByPathReturns = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) FindByPathReturnsOnCall(i int, result1 []client.Credential, result2 error) {
	fake.FindByPathStub = nil
	if fake.findByPathReturnsOnCall == nil {
		fake.findByPathReturnsOnCall = make(map[int]struct {
			result1 []client.Credential
			result2 error
		})
	}
	fake.findByPathReturnsOnCall[i] = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) FindByPartialName(partialName string) ([]client.Credential, error) {
	fake.findByPartialNameMutex.Lock()
	ret, specificReturn := fake.findByPartialNameReturnsOnCall[len(fake.findByPartialNameArgsForCall)]
	fake.findByPartialNameArgsForCall = append(fake.findByPartialNameArgsForCall, struct {
		partialName string
	}{partialName})
	fake.recordInvocation("FindByPartialName", []interface{}{partialName})
	fake.findByPartialNameMutex.Unlock()
	if fake.FindByPartialNameStub != nil {
		return fake.FindByPartialNameStub(partialName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.findByPartialNameReturns.result1, fake.findByPartialNameReturns.result2
}

func (fake *FakeCredhub) FindByPartialNameCallCount() int {
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	return len(fake.findByPartialNameArgsForCall)
}

func (fake *FakeCredhub) FindByPartialNameArgsForCall(i int) string {
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	return fake.findByPartialNameArgsForCall[i].partialName
}

func (fake *FakeCredhub) FindByPartialNameReturns(result1 []client.Credential, result2 error) {
	fake.FindByPartialNameStub = nil
	fake.findByPartialNameReturns = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) FindByPartialNameReturnsOnCall(i int, result1 []client.Credential, result2 error) {
	fake.FindByPartialNameStub = nil
	if fake.findByPartialNameReturnsOnCall == nil {
		fake.findByPartialNameReturnsOnCall = make(map[int]struct {
			result1 []client.Credential
			result2 error
		})
	}
	fake.findByPartialNameReturnsOnCall[i] = struct {
		result1 []client.Credential
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetPermissions(credentialName string) ([]client.Permission, error) {
	fake.getPermissionsMutex.Lock()
	ret, specificReturn := fake.getPermissionsReturnsOnCall[len(fake.getPermissionsArgsForCall)]
	fake.getPermissionsArgsForCall = append(fake.getPermissionsArgsForCall, struct {
		credentialName string
	}{credentialName})
	fake.recordInvocation("GetPermissions", []interface{}{credentialName})
	fake.getPermissionsMutex.Unlock()
	if fake.GetPermissionsStub != nil {
		return fake.GetPermissionsStub(credentialName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getPermissionsReturns.result1, fake.getPermissionsReturns.result2
}

func (fake *FakeCredhub) GetPermissionsCallCount() int {
	fake.getPermissionsMutex.RLock()
	defer fake.getPermissionsMutex.RUnlock()
	return len(fake.getPermissionsArgsForCall)
}

func (fake *FakeCredhub) GetPermissionsArgsForCall(i int) string {
	fake.getPermissionsMutex.RLock()
	defer fake.getPermissionsMutex.RUnlock()
	return fake.getPermissionsArgsForCall[i].credentialName
}

func (fake *FakeCredhub) GetPermissionsReturns(result1 []client.Permission, result2 error) {
	fake.GetPermissionsStub = nil
	fake.getPermissionsReturns = struct {
		result1 []client.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) GetPermissionsReturnsOnCall(i int, result1 []client.Permission, result2 error) {
	fake.GetPermissionsStub = nil
	if fake.getPermissionsReturnsOnCall == nil {
		fake.getPermissionsReturnsOnCall = make(map[int]struct {
			result1 []client.Permission
			result2 error
		})
	}
	fake.getPermissionsReturnsOnCall[i] = struct {
		result1 []client.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) AddPermissions(credentialName string, newPerms []client.Permission) ([]client.Permission, error) {
	var newPermsCopy []client.Permission
	if newPerms != nil {
		newPermsCopy = make([]client.Permission, len(newPerms))
		copy(newPermsCopy, newPerms)
	}
	fake.addPermissionsMutex.Lock()
	ret, specificReturn := fake.addPermissionsReturnsOnCall[len(fake.addPermissionsArgsForCall)]
	fake.addPermissionsArgsForCall = append(fake.addPermissionsArgsForCall, struct {
		credentialName string
		newPerms       []client.Permission
	}{credentialName, newPermsCopy})
	fake.recordInvocation("AddPermissions", []interface{}{credentialName, newPermsCopy})
	fake.addPermissionsMutex.Unlock()
	if fake.AddPermissionsStub != nil {
		return fake.AddPermissionsStub(credentialName, newPerms)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.addPermissionsReturns.result1, fake.addPermissionsReturns.result2
}

func (fake *FakeCredhub) AddPermissionsCallCount() int {
	fake.addPermissionsMutex.RLock()
	defer fake.addPermissionsMutex.RUnlock()
	return len(fake.addPermissionsArgsForCall)
}

func (fake *FakeCredhub) AddPermissionsArgsForCall(i int) (string, []client.Permission) {
	fake.addPermissionsMutex.RLock()
	defer fake.addPermissionsMutex.RUnlock()
	return fake.addPermissionsArgsForCall[i].credentialName, fake.addPermissionsArgsForCall[i].newPerms
}

func (fake *FakeCredhub) AddPermissionsReturns(result1 []client.Permission, result2 error) {
	fake.AddPermissionsStub = nil
	fake.addPermissionsReturns = struct {
		result1 []client.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) AddPermissionsReturnsOnCall(i int, result1 []client.Permission, result2 error) {
	fake.AddPermissionsStub = nil
	if fake.addPermissionsReturnsOnCall == nil {
		fake.addPermissionsReturnsOnCall = make(map[int]struct {
			result1 []client.Permission
			result2 error
		})
	}
	fake.addPermissionsReturnsOnCall[i] = struct {
		result1 []client.Permission
		result2 error
	}{result1, result2}
}

func (fake *FakeCredhub) DeletePermissions(credentialName string, actorID string) error {
	fake.deletePermissionsMutex.Lock()
	ret, specificReturn := fake.deletePermissionsReturnsOnCall[len(fake.deletePermissionsArgsForCall)]
	fake.deletePermissionsArgsForCall = append(fake.deletePermissionsArgsForCall, struct {
		credentialName string
		actorID        string
	}{credentialName, actorID})
	fake.recordInvocation("DeletePermissions", []interface{}{credentialName, actorID})
	fake.deletePermissionsMutex.Unlock()
	if fake.DeletePermissionsStub != nil {
		return fake.DeletePermissionsStub(credentialName, actorID)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deletePermissionsReturns.result1
}

func (fake *FakeCredhub) DeletePermissionsCallCount() int {
	fake.deletePermissionsMutex.RLock()
	defer fake.deletePermissionsMutex.RUnlock()
	return len(fake.deletePermissionsArgsForCall)
}

func (fake *FakeCredhub) DeletePermissionsArgsForCall(i int) (string, string) {
	fake.deletePermissionsMutex.RLock()
	defer fake.deletePermissionsMutex.RUnlock()
	return fake.deletePermissionsArgsForCall[i].credentialName, fake.deletePermissionsArgsForCall[i].actorID
}

func (fake *FakeCredhub) DeletePermissionsReturns(result1 error) {
	fake.DeletePermissionsStub = nil
	fake.deletePermissionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhub) DeletePermissionsReturnsOnCall(i int, result1 error) {
	fake.DeletePermissionsStub = nil
	if fake.deletePermissionsReturnsOnCall == nil {
		fake.deletePermissionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deletePermissionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCredhub) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listAllCredentialsMutex.RLock()
	defer fake.listAllCredentialsMutex.RUnlock()
	fake.getByIDMutex.RLock()
	defer fake.getByIDMutex.RUnlock()
	fake.getAllByNameMutex.RLock()
	defer fake.getAllByNameMutex.RUnlock()
	fake.getVersionsByNameMutex.RLock()
	defer fake.getVersionsByNameMutex.RUnlock()
	fake.getLatestByNameMutex.RLock()
	defer fake.getLatestByNameMutex.RUnlock()
	fake.setMutex.RLock()
	defer fake.setMutex.RUnlock()
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	fake.regenerateMutex.RLock()
	defer fake.regenerateMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.findByPathMutex.RLock()
	defer fake.findByPathMutex.RUnlock()
	fake.findByPartialNameMutex.RLock()
	defer fake.findByPartialNameMutex.RUnlock()
	fake.getPermissionsMutex.RLock()
	defer fake.getPermissionsMutex.RUnlock()
	fake.addPermissionsMutex.RLock()
	defer fake.addPermissionsMutex.RUnlock()
	fake.deletePermissionsMutex.RLock()
	defer fake.deletePermissionsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCredhub) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.Credhub = new(FakeCredhub)
